-module(picross).
-export([test/0,
         solve/2,
         map_to_str/1,
         str_to_map/1]).

test() ->

    badarg = solve([], [[1]]),
    badarg = solve([[]], [[1]]),
    badarg = solve([[0]], [[1]]),
    badarg = solve([[1]], [[1, qwerty]]),
    badarg = solve([[1]], [[-1]]),
    badarg = solve([[1]], [[2]]),
    badarg = solve([[1]], [1]),
    { ok, [[fill]]} = solve([[1]], [[1]]),

    ambiguous = solve([[1], [1]], [[1], [1]]),
    invalid = solve([[1], [2]], [[2], [2]]),
    invalid = solve([[2], [1]], [[2], [2]]),
    invalid = solve([[2], [2]], [[1], [2]]),
    invalid = solve([[2], [2]], [[2], [1]]),

    TestMap = fun(Str, Rows, Cols) ->
        Map = str_to_map(lists:filter(fun(Elem) -> Elem =/= $  end, Str)),
        { ok, Map } = solve(Rows, Cols)
    end,

    % 2x2 fill
    TestMap(
        "##
         ##
        ",
        [[2],
         [2]],
        [[2],
         [2]]),

    % 5x5 horse
    TestMap(
        "###..
         .#..#
         .####
         .###.
         .#.#.
        ",
        [[3],
         [1,1],
         [4],
         [3],
         [1,1]],
        [[1],
         [5],
         [1,2],
         [3],
         [2]]),

    % A non square puzzle
    TestMap(
        "###..##.##
         ###.#....#
         ####..####
         ##.#.#...#
        ",
        [[3,2,2],
         [3,1,1],
         [4,4],
         [2,1,1,1]],
        [[4],
         [4],
         [3],
         [2],
         [1],
         [1,1],
         [1,1],
         [1],
         [1,1],
         [4]]),

    % 15x15 duck
    TestMap(
        ".........###...
         ........#####..
         .......####.###
         .......#######.
         ........#####..
         .........###...
         ........#####..
         #.....########.
         ###..###...###.
         #######.###.##.
         .#####.####.##.
         .########..##..
         ..##########...
         ....##.###.....
         ......######...
        ",
        [[3],
         [5],
         [4,3],
         [7],
         [5],
         [3],
         [5],
         [1,8],
         [3,3,3],
         [7,3,2],
         [5,4,2],
         [8,2],
         [10],
         [2,3],
         [6]],
        [[3],
         [4],
         [5],
         [4],
         [5],
         [6],
         [3,2,1],
         [2,2,5],
         [4,2,6],
         [8,2,3],
         [8,2,1,1],
         [2,6,2,1],
         [4,6],
         [2,4],
         [1]]),

    % 25x25 owl
    TestMap(
        "###.....########......###
         .#######################.
         ...###...######...###....
         .#######..####..#######..
         .##...###..##..###..####.
         ##.....##..##.##......##.
         #...#.#..#.##.#..#.#...##
         #...####.##.###.####...##
         #.###..##.#..#.##..###..#
         #..#.##.#.#..#.#.##.#...#
         #.##.##.#.#..#.#.##.##..#
         #..##..##.#..#.##..##..##
         #...####.#..#.#.####...##
         ##..#.#.##.###.#.#.#..###
         .###...##.#####.#....##..
         ...######.#####.######...
         #...###....###..........#
         ###.........#..........##
         .###..................###
         ..###.###...##.####..##..
         ...#######.###########..#
         #.......#####.####......#
         #.####.............####.#
         #...#################...#
         ###...#####...#####...###
        ",
        [[3,8,3],
         [23],
         [3,6,3],
         [7,4,7],
         [2,3,2,3,4],
         [2,2,2,2,2],
         [1,1,1,1,2,1,1,1,2],
         [1,4,2,3,4,2],
         [1,3,2,1,1,2,3,1],
         [1,1,2,1,1,1,1,2,1,1],
         [1,2,2,1,1,1,1,2,2,1],
         [1,2,2,1,1,2,2,2],
         [1,4,1,1,1,4,2],
         [2,1,1,2,3,1,1,1,3],
         [3,2,5,1,2],
         [6,5,6],
         [1,3,3,1],
         [3,1,2],
         [3,3],
         [3,3,2,4,2],
         [7,11,1],
         [1,5,4,1],
         [1,4,4,1],
         [1,17,1],
         [3,5,5,3]],
        [[1,9,2,4],
         [2,3,2,2,1],
         [2,2,1,1,1,3,1,1],
         [3,4,2,3,1],
         [3,3,3,2,2,2],
         [3,1,2,1,2,1,2],
         [1,2,2,2,2,2,2,2],
         [1,3,2,2,2,2,2],
         [2,2,4,3,3,2],
         [3,2,2,2,2],
         [4,5,2,1,2],
         [7,4,2,1],
         [8,6,3,1],
         [4,5,4,2,1],
         [3,3,1,2,2,2],
         [2,2,4,1,3,2],
         [1,2,2,2,2,3,2],
         [1,2,2,2,2,1,3,2],
         [3,1,2,1,1,2,2],
         [3,3,3,1,1,2],
         [4,4,1,1,2],
         [1,2,1,1,2,2,1],
         [2,3,2,2,1,1],
         [2,4,3,2,1],
         [1,8,3,5]]),

    ok.

map_to_str(Maps) ->
    picross_solver_orchestrator:map_to_str(Maps).

str_to_map(Str) ->
    picross_solver_orchestrator:str_to_map(Str).

solve(RowsFills, ColsFills) ->
    case picross_solver_orchestrator:start_link(self(), RowsFills, ColsFills) of
        {ok, Orchestrator} ->
            Answer = receive
                solved -> {ok, picross_solver_orchestrator:get_map(Orchestrator)};
                stalled -> ambiguous;
                nonsense -> invalid;
                Unexpected -> exit(unexpected, Unexpected)
            end,
            picross_solver_orchestrator:stop(Orchestrator),
            Answer;
        badarg -> badarg
    end.
